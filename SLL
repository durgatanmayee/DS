#include<stdio.h>
#include<stdlib.h>
struct node{
			int data;
			struct node*link;
			};
struct node*head = NULL,*cur,*temp,*temp1,*t;
struct node* create(){
				int n;
				printf("Enter no of elements");
				scanf("%d",&n);
					while(n--){
	cur = (struct node*) malloc(sizeof(struct node));
	scanf("%d",&(cur->data));
			cur->link = NULL;
	if (head == NULL){
				head = cur;
			}
	else{
			temp = head;
	while (temp->link!=NULL){
			temp = temp->link;
		temp-> link = cur;
	}
}
	return head;
}
struct node*insert_begin(int ele){
	cur = (struct node*) malloc(sizeof(struct node));
			cur->data = ele;
			cur->link = head;
			head = cur;
	return head
}
struct node*insert_end(int ele){
	cur= (struct node*) malloc(sizeof(struct node));
		cur->data = ele;
		cur->link = NULL;
		temp = head;
	while(temp->link!=NULL){
				temp = temp->link;
			}
	temp->link = cur;
return head
}
struct node*insert_pos(int pos,int ele){
			int c = 1;
	cur = (struct node*) malloc(sizeof(struct node));
			cur->data = ele;
			temp = head;
	while(c<pos-1){
			temp = temp->link;
				c++;
		}
	cur->link = temp->link;
	temp->link = cur;
return head;
}
struct node*delete_begin(struct node*head){
			temp = head;
			head = temp->link;
printf("Delete element: %d",temp->data)
		free(temp)
	return head;
}
struct node*delete_end(struct node*head){
	temp = head;
while (temp->link!=NULL){
		temp1 = temp;
		temp = temp->link;
}
temp 1->link=NULL
printf("Deleted element:%d",temp->data);
		free(temp);
	return head;
}
struct node*delete_pos(struct node*head,int pos){
		temp = head;
		int c = 1;
	while (C<pos){
		temp1 = temp;
		temp = temp->link;
		c++;
}
temp1->link = temp->link;
	printf("Deleted element: %d",temp->data);
		free(temp);
	return head;
}
void display(struct node *head){
		temp = head;
	while(temp!=NULL){
		printf("%d->",temp->data);
	temp = temp->link;
	}
}
void reverse display(struct node*head){
		if (head!=NULL){
				reverse display(head->link);
					printf("%d",head->data);
		}
}
int search(struct node*head,int key){
		int c = 1;
		temp = head;
	while(temp!=NULL){
		if(key==temp->data){
			return c;
	}
		temp = temp->link;
			c++;
}
	return -1;
}
struct node*sorting(struct node*head){
	int x;
		temp = head;
			while(temp!=NULL){
		t = head;
	while(temp!=NULL){
		if(t->data > t->link->data){
				x = t->data;
				t->data=t->link->data;
				t->link->data = x;
	}
t = t->link;
}
	temp = temp->link;
}
return head;
}
int main(){
		int ch,ele,pos,c,key;
		while(1){
				printf("1 - create\n 2 - Insert at beginning\n 3 - Insert at end\n 4 - Insert at position\n 5 - Delete at begin\n 6 - Delete at end\n 7 - Delete at pos\n 8 - Display\n 9 - Reverse display\n 10 - Search\n 11 - Sort\n 12 - Exit\n");
	printf("Enter your choice");
	scanf("%d";&ch);
switch (ch)
{
case 1: head = create()
	break;
case 2: scanf("%d",&ele);
		head = insert_begin(ele);
	break;
case 3: scanf("%d",&ele);
		scanf("%d",&pos);
		head = insert_pos(pos,ele);
	break;
case 4: scanf("%d",&ele);
		head = insert_end(ele);
	break;
case 5: head = delete_begin(head);
	break;
case 6: scanf("%d",&pos);
		head = delete_pos(head,pos);
	break;
case 7: head = delete_end(head);
	break;
case 8: display(head);
	break;
case 9: Reverse display(head);
	break;
case 10: scanf("%d",&key);
		c = search(head,key);
	break;
case 11: head = sorting(head);
	break;
case 12: break;
		}
	}
 }
